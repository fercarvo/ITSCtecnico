<!doctype html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Terminal</title>
    <script>
        console.log(window.parent.location.host === 'tecnico.itsc.ec')
    </script>
    <script src="/js/hterm_all.js"></script>
    <script src="/js/socket.io.js"></script>
    <!--<script src="/js/wetty.js"></script>-->
    <style>
        html,
        body {
            height: 100%;
            width: 100%;
            margin: 0px;
        }
        #terminal {
            display: block;
            position: relative;
            width: 100%;
            height: 100%;
        }
    </style>
</head>

<body>
    <div id="terminal"></div>
    <script>
        var term;
        var socket = io(location.origin, {path: '/terminal-connection', transports: ['websocket']})
        var buf = '';

        function Wetty(argv) {
            this.argv_ = argv;
            this.io = null;
            this.pid_ = -1;
        }

        Wetty.prototype.run = function() {
            this.io = this.argv_.io.push();

            this.io.onVTKeystroke = this.sendString_.bind(this);
            this.io.sendString = this.sendString_.bind(this);
            this.io.onTerminalResize = this.onTerminalResize.bind(this);
        }

        Wetty.prototype.sendString_ = function(str) {
            socket.emit('input', str);
        };


        Wetty.prototype.onTerminalResize = function(col, row) {
            socket.emit('resize', { col: col, row: row });
        };

        socket.on('connect', function() {
            lib.init(function() {
                hterm.defaultStorage = new lib.Storage.Local();
                term = new hterm.Terminal();
                window.term = term;
                term.decorate(document.getElementById('terminal'));

                term.setCursorPosition(0, 0);
                term.setCursorVisible(true);
                term.prefs_.set('ctrl-c-copy', true);
                term.prefs_.set('ctrl-v-paste', true);
                term.prefs_.set('use-default-window-copy', true);

                term.runCommandClass(Wetty, document.location.hash.substr(1));
                socket.emit('resize', {
                    col: term.screenSize.width,
                    row: term.screenSize.height
                });

                if (buf && buf != '')
                {
                    term.io.writeUTF16(buf);
                    buf = '';
                }
            });
        });

        socket.on('output', function(data) {
            if (!term) {
                buf += data;
                return;
            }
            term.io.writeUTF16(data);
        });

        socket.on('disconnect', function() {
            console.log("Socket.io connection closed");
        });

        socket.on('error', function(err) {
            console.log(err);
        });
    </script>
</body>

</html>
